import 'package:flutter/material.dart';
import 'package:nihongo_japanese_app/models/japanese_character.dart';
import 'package:nihongo_japanese_app/services/openai_vision_service.dart';
import 'package:nihongo_japanese_app/utils/image_combiner.dart';
import 'package:nihongo_japanese_app/utils/reference_character_generator.dart';
import 'package:nihongo_japanese_app/utils/stroke_to_image_converter.dart';

/// Result containing both recognition result and the images used
class RecognitionResultWithImages {
  final RecognitionResult recognitionResult;
  final String handwrittenImageBase64;
  final String? referenceImageBase64;

  RecognitionResultWithImages({
    required this.recognitionResult,
    required this.handwrittenImageBase64,
    this.referenceImageBase64,
  });
}

/// Simplified character recognition service using OpenAI Vision API
class CharacterRecognitionService {
  /// Recognize character using OpenAI Vision API
  static Future<RecognitionResult> recognizeCharacter(
    List<List<Offset>> userStrokes,
    JapaneseCharacter expectedCharacter,
  ) async {
    final result = await recognizeCharacterWithImages(userStrokes, expectedCharacter);
    return result.recognitionResult;
  }

  /// Recognize character and return both result and images
  static Future<RecognitionResultWithImages> recognizeCharacterWithImages(
    List<List<Offset>> userStrokes,
    JapaneseCharacter expectedCharacter,
  ) async {
    try {
      debugPrint('ü§ñ OpenAI Vision Recognition starting...');
      debugPrint('   Expected character: ${expectedCharacter.character}');
      debugPrint('   User strokes count: ${userStrokes.length}');

      // Test API key first
      final apiWorking = await OpenAIVisionService.testApiKey();
      if (!apiWorking) {
        debugPrint('‚ùå OpenAI API is not working! Using fallback.');
        return RecognitionResultWithImages(
          recognitionResult:
              _createFallbackResult(expectedCharacter, 'Recognition service not available'),
          handwrittenImageBase64: '',
          referenceImageBase64: null,
        );
      }

      if (userStrokes.isEmpty) {
        return RecognitionResultWithImages(
          recognitionResult: RecognitionResult(
            recognizedCharacter: expectedCharacter.character,
            confidence: 0.0,
            alternativeMatches: [],
            isCorrect: false,
            englishTranslation: _getEnglishTranslation(expectedCharacter.character),
            feedback: 'Please draw the character first! üìù',
            accuracyScore: 0.0,
            shapeScore: 0.0,
            strokeScore: 0.0,
            proportionScore: 0.0,
            qualityScore: 0.0,
          ),
          handwrittenImageBase64: '',
          referenceImageBase64: null,
        );
      }

      // Convert strokes to high-quality base64 image
      final base64Image = await StrokeToImageConverter.createHighQualityImage(
        normalizedStrokes: userStrokes,
        imageSize: const Size(512, 512),
        backgroundColor: Colors.white,
        strokeColor: Colors.black,
        strokeWidth: 12.0,
      );

      debugPrint('   Image created: ${base64Image.length} characters');

      // Generate reference character image for comparison
      String? referenceImageBase64;
      try {
        final svgPath = ReferenceCharacterGenerator.getSvgPath(
            expectedCharacter.character, expectedCharacter.type);
        referenceImageBase64 = await ReferenceCharacterGenerator.generateReferenceImage(
          character: expectedCharacter.character,
          svgPath: svgPath,
        );
        debugPrint('   Reference image generated: ${referenceImageBase64?.length ?? 0} characters');
      } catch (e) {
        debugPrint('   Warning: Could not generate reference image: $e');
      }

      // Create combined comparison image
      String? combinedImageBase64;
      if (referenceImageBase64 != null) {
        try {
          combinedImageBase64 = await ImageCombiner.createComparisonImage(
            handwrittenImageBase64: base64Image,
            referenceImageBase64: referenceImageBase64,
          );
          debugPrint('   Combined image created: ${combinedImageBase64.length} characters');
        } catch (e) {
          debugPrint('   Warning: Could not create combined image: $e');
        }
      }

      // Use OpenAI Vision API to analyze the character
      final result = await OpenAIVisionService.compareCharacter(
        base64Image: combinedImageBase64 ?? base64Image,
        targetCharacter: expectedCharacter.character,
        characterType: expectedCharacter.type,
        referenceImageBase64: null, // No longer needed since we have combined image
      );

      debugPrint('   OpenAI confidence: ${((result.confidence ?? 0.0) * 100).toStringAsFixed(1)}%');
      debugPrint('   Is correct: ${result.isCorrect}');

      return RecognitionResultWithImages(
        recognitionResult: result,
        handwrittenImageBase64: base64Image,
        referenceImageBase64: referenceImageBase64,
      );
    } catch (e) {
      debugPrint('‚ùå Character recognition error: $e');

      return RecognitionResultWithImages(
        recognitionResult: RecognitionResult(
          recognizedCharacter: expectedCharacter.character,
          confidence: 0.0,
          alternativeMatches: [],
          isCorrect: false,
          englishTranslation: _getEnglishTranslation(expectedCharacter.character),
          feedback: 'Recognition error: $e',
          accuracyScore: 0.0,
          shapeScore: 0.0,
          strokeScore: 0.0,
          proportionScore: 0.0,
          qualityScore: 0.0,
        ),
        handwrittenImageBase64: '',
        referenceImageBase64: null,
      );
    }
  }

  /// Get English translation for character
  static String _getEnglishTranslation(String character) {
    const translations = {
      // Hiragana
      '„ÅÇ': 'a', '„ÅÑ': 'i', '„ÅÜ': 'u', '„Åà': 'e', '„Åä': 'o',
      '„Åã': 'ka', '„Åç': 'ki', '„Åè': 'ku', '„Åë': 'ke', '„Åì': 'ko',
      '„Åï': 'sa', '„Åó': 'shi', '„Åô': 'su', '„Åõ': 'se', '„Åù': 'so',
      '„Åü': 'ta', '„Å°': 'chi', '„Å§': 'tsu', '„Å¶': 'te', '„Å®': 'to',
      '„Å™': 'na', '„Å´': 'ni', '„Å¨': 'nu', '„Å≠': 'ne', '„ÅÆ': 'no',
      '„ÅØ': 'ha', '„Å≤': 'hi', '„Åµ': 'fu', '„Å∏': 'he', '„Åª': 'ho',
      '„Åæ': 'ma', '„Åø': 'mi', '„ÇÄ': 'mu', '„ÇÅ': 'me', '„ÇÇ': 'mo',
      '„ÇÑ': 'ya', '„ÇÜ': 'yu', '„Çà': 'yo',
      '„Çâ': 'ra', '„Çä': 'ri', '„Çã': 'ru', '„Çå': 're', '„Çç': 'ro',
      '„Çè': 'wa', '„Çí': 'wo', '„Çì': 'n',
      // Katakana
      '„Ç¢': 'a', '„Ç§': 'i', '„Ç¶': 'u', '„Ç®': 'e', '„Ç™': 'o',
      '„Ç´': 'ka', '„Ç≠': 'ki', '„ÇØ': 'ku', '„Ç±': 'ke', '„Ç≥': 'ko',
      '„Çµ': 'sa', '„Ç∑': 'shi', '„Çπ': 'su', '„Çª': 'se', '„ÇΩ': 'so',
      '„Çø': 'ta', '„ÉÅ': 'chi', '„ÉÑ': 'tsu', '„ÉÜ': 'te', '„Éà': 'to',
      '„Éä': 'na', '„Éã': 'ni', '„Éå': 'nu', '„Éç': 'ne', '„Éé': 'no',
      '„Éè': 'ha', '„Éí': 'hi', '„Éï': 'fu', '„Éò': 'he', '„Éõ': 'ho',
      '„Éû': 'ma', '„Éü': 'mi', '„É†': 'mu', '„É°': 'me', '„É¢': 'mo',
      '„É§': 'ya', '„É¶': 'yu', '„É®': 'yo',
      '„É©': 'ra', '„É™': 'ri', '„É´': 'ru', '„É¨': 're', '„É≠': 'ro',
      '„ÉØ': 'wa', '„É≤': 'wo', '„É≥': 'n',
    };

    return translations[character] ?? character;
  }

  /// Create fallback result when API is not available
  static RecognitionResult _createFallbackResult(
      JapaneseCharacter expectedCharacter, String reason) {
    return RecognitionResult(
      recognizedCharacter: expectedCharacter.character,
      confidence: 0.0,
      alternativeMatches: [],
      isCorrect: false,
      englishTranslation: _getEnglishTranslation(expectedCharacter.character),
      feedback: '‚ùå $reason - Please check your internet connection.',
      accuracyScore: 0.0,
      shapeScore: 0.0,
      strokeScore: 0.0,
      proportionScore: 0.0,
      qualityScore: 0.0,
    );
  }
}
