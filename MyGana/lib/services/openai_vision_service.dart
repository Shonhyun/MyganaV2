import 'dart:convert';

import 'package:flutter/foundation.dart';
import 'package:http/http.dart' as http;
import 'package:nihongo_japanese_app/config/openai_config.dart';

class OpenAIVisionService {
  /// Test if the API key is working with a simple text request
  static Future<bool> testApiKey() async {
    try {
      debugPrint('üß™ Testing OpenAI API key...');

      final response = await http.post(
        Uri.parse(OpenAIConfig.baseUrl),
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer ${OpenAIConfig.apiKey}',
        },
        body: jsonEncode({
          'model': OpenAIConfig.model,
          'messages': [
            {
              'role': 'user',
              'content': 'Say "API test successful" if you can read this.',
            },
          ],
          'max_tokens': 50,
          'temperature': 0.1,
        }),
      );

      debugPrint('üß™ Test response status: ${response.statusCode}');

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        final content = data['choices'][0]['message']['content'] as String;
        debugPrint('üß™ Test response: $content');
        debugPrint('‚úÖ API key is working!');
        return true;
      } else {
        debugPrint('‚ùå API key test failed: ${response.statusCode} - ${response.body}');
        return false;
      }
    } catch (e) {
      debugPrint('‚ùå API key test error: $e');
      return false;
    }
  }

  /// Compare user's handwritten character with the target character using OpenAI Vision API
  static Future<RecognitionResult> compareCharacter({
    required String base64Image,
    required String targetCharacter,
    required String characterType, // 'hiragana' or 'katakana'
    String? referenceImageBase64, // Optional reference character image
  }) async {
    try {
      debugPrint('üîç OpenAI Vision: Analyzing character "$targetCharacter"');
      debugPrint('üì∏ Handwritten image size: ${base64Image.length} characters');
      debugPrint('üì∏ Reference image size: ${referenceImageBase64?.length ?? 0} characters');

      final prompt = _buildPrompt(targetCharacter, characterType);

      // Count images being sent
      final imageCount = 1 + (referenceImageBase64 != null ? 1 : 0);
      debugPrint('üì§ Sending $imageCount images to OpenAI API');

      // Prepare request body
      final requestBody = {
        'model': OpenAIConfig.model,
        'messages': [
          {
            'role': 'user',
            'content': [
              {
                'type': 'text',
                'text': prompt,
              },
              {
                'type': 'image_url',
                'image_url': {
                  'url': 'data:image/png;base64,$base64Image',
                },
              },
              // Add reference image if available
              if (referenceImageBase64 != null)
                {
                  'type': 'image_url',
                  'image_url': {
                    'url': 'data:image/png;base64,$referenceImageBase64',
                  },
                },
            ],
          },
        ],
        'max_tokens': OpenAIConfig.maxTokens,
        'temperature': OpenAIConfig.temperature,
      };

      debugPrint('üåê Making API request to: ${OpenAIConfig.baseUrl}');
      debugPrint('üîë Using API key: ${OpenAIConfig.apiKey.substring(0, 20)}...');
      debugPrint('ü§ñ Using model: ${OpenAIConfig.model}');
      debugPrint('üìù Request body size: ${jsonEncode(requestBody).length} characters');

      final response = await http.post(
        Uri.parse(OpenAIConfig.baseUrl),
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer ${OpenAIConfig.apiKey}',
        },
        body: jsonEncode(requestBody),
      );

      debugPrint('üì° Response status: ${response.statusCode}');
      debugPrint('üì° Response headers: ${response.headers}');

      if (response.statusCode == 200) {
        debugPrint('‚úÖ API call successful!');
        final data = jsonDecode(response.body);

        // Check if we have the expected structure
        if (data['choices'] == null || data['choices'].isEmpty) {
          debugPrint('‚ùå No choices in response: $data');
          return _createErrorResult(targetCharacter, 'No choices in API response');
        }

        final content = data['choices'][0]['message']['content'] as String;
        debugPrint('ü§ñ Raw OpenAI Response: $content');
        debugPrint('üìä Response length: ${content.length} characters');

        final result = _parseResponse(content, targetCharacter);
        debugPrint(
            'üéØ Parsed result - isCorrect: ${result.isCorrect}, confidence: ${result.confidence}');

        return result;
      } else {
        debugPrint('‚ùå OpenAI API Error: ${response.statusCode}');
        debugPrint('‚ùå Error response body: ${response.body}');
        debugPrint('‚ùå Error response headers: ${response.headers}');

        // Try to parse error details
        try {
          final errorData = jsonDecode(response.body);
          final errorMessage = errorData['error']?['message'] ?? 'Unknown error';
          debugPrint('‚ùå API Error message: $errorMessage');
          return _createErrorResult(targetCharacter, 'API Error: $errorMessage');
        } catch (e) {
          return _createErrorResult(
              targetCharacter, 'API Error: ${response.statusCode} - ${response.body}');
        }
      }
    } catch (e) {
      debugPrint('‚ùå OpenAI Vision Error: $e');
      return _createErrorResult(targetCharacter, 'Error: $e');
    }
  }

  /// Build enhanced prompt with character-specific details
  static String _buildPrompt(String targetCharacter, String characterType) {
    final characterDetails = _getCharacterSpecificDetails(targetCharacter);

    return '''
You are an expert Japanese calligraphy teacher. I will show you a comparison image with two characters side by side:

- **LEFT SIDE**: A handwritten character drawn by a student
- **RIGHT SIDE**: The correct reference character "$targetCharacter"

${characterDetails}

EVALUATION CRITERIA:
1. **Shape Recognition (40%)** - Does the handwritten character resemble the reference?
2. **Stroke Count (30%)** - Does it have the correct number of strokes?
3. **Proportions (20%)** - Are the size relationships reasonable?
4. **Stroke Quality (10%)** - Is the execution clean?

REASONABLE STANDARDS:
- The handwritten character should be recognizable as "$targetCharacter"
- Stroke count should match the reference
- Overall shape should be similar to the reference
- Minor variations in curves, angles, and proportions are acceptable
- If the character is very close to the reference, consider it correct even with small differences
- Be generous with scoring - aim for 70-90% scores for reasonably good attempts

Respond with ONLY this JSON format (no other text):
{
  "isCorrect": true/false,
  "confidence": 0.0-1.0,
  "accuracyScore": 0-100,
  "shapeScore": 0-100,
  "strokeScore": 0-100,
  "proportionScore": 0-100,
  "qualityScore": 0-100,
  "feedback": "Brief, specific feedback",
  "issues": ["list of problems"],
  "strengths": ["what was done well"],
  "suggestions": ["improvement tips"]
}

Be encouraging and fair. Focus on helping the student improve while recognizing good effort.
''';
  }

  /// Get character-specific details for enhanced recognition
  static String _getCharacterSpecificDetails(String character) {
    final details = {
      // Hiragana characters
      '„ÅÇ': 'Three strokes: horizontal line, vertical line with hook, horizontal line below',
      '„ÅÑ': 'Two strokes: short diagonal down-right, longer diagonal down-right',
      '„ÅÜ': 'Two strokes: short horizontal, curved line down and up',
      '„Åà': 'Two strokes: horizontal line, curved line with hook',
      '„Åä': 'Three strokes: horizontal, vertical with hook, horizontal below',
      '„Åã': 'Two strokes: horizontal line, vertical line with hook',
      '„Åç': 'Three strokes: horizontal, vertical, horizontal below',
      '„Åè': 'One stroke: curved line down-right',
      '„Åë': 'Two strokes: vertical line, horizontal line with hook',
      '„Åì': 'Two strokes: horizontal line, horizontal line below',
      '„Åï': 'Two strokes: horizontal, vertical with hook',
      '„Åó': 'One stroke: vertical line with slight curve',
      '„Åô': 'Two strokes: horizontal, curved line down-right',
      '„Åõ': 'Two strokes: horizontal, vertical with hook',
      '„Åù': 'One stroke: curved line with multiple bends',
      '„Åü': 'Two strokes: horizontal, vertical with hook',
      '„Å°': 'Two strokes: horizontal, curved line down-right',
      '„Å§': 'One stroke: horizontal line',
      '„Å¶': 'One stroke: horizontal line with hook',
      '„Å®': 'Two strokes: horizontal, vertical with hook',
      '„Å™': 'Two strokes: horizontal, vertical with hook',
      '„Å´': 'Two strokes: vertical, horizontal with hook',
      '„Å¨': 'Two strokes: horizontal, curved line down-right',
      '„Å≠': 'Two strokes: horizontal, vertical with hook',
      '„ÅÆ': 'One stroke: curved line forming circle',
      '„ÅØ': 'Two strokes: horizontal, vertical with hook',
      '„Å≤': 'One stroke: curved line with multiple bends',
      '„Åµ': 'Two strokes: horizontal, curved line down-right',
      '„Å∏': 'One stroke: curved line down-right',
      '„Åª': 'Two strokes: horizontal, vertical with hook',
      '„Åæ': 'Two strokes: horizontal, vertical with hook',
      '„Åø': 'Two strokes: horizontal, vertical with hook',
      '„ÇÄ': 'Two strokes: horizontal, curved line down-right',
      '„ÇÅ': 'Two strokes: horizontal, curved line down-right',
      '„ÇÇ': 'Two strokes: horizontal, vertical with hook',
      '„ÇÑ': 'Two strokes: horizontal, vertical with hook',
      '„ÇÜ': 'Two strokes: horizontal, curved line down-right',
      '„Çà': 'Two strokes: horizontal, vertical with hook',
      '„Çâ': 'Two strokes: horizontal, vertical with hook',
      '„Çä': 'Two strokes: vertical, vertical',
      '„Çã': 'One stroke: curved line with multiple bends',
      '„Çå': 'Two strokes: horizontal, vertical with hook',
      '„Çç': 'One stroke: curved line with multiple bends',
      '„Çè': 'Two strokes: horizontal, vertical with hook',
      '„Çí': 'Two strokes: horizontal, vertical with hook',
      '„Çì': 'Two strokes: horizontal, vertical with hook',

      // Katakana characters
      '„Ç¢': 'Two strokes: horizontal line, diagonal down-right',
      '„Ç§': 'Two strokes: vertical line, diagonal down-right',
      '„Ç¶': 'Two strokes: horizontal line, curved line down-right',
      '„Ç®': 'Two strokes: horizontal line, vertical line',
      '„Ç™': 'Three strokes: horizontal, vertical, horizontal below',
      '„Ç´': 'Two strokes: horizontal line, vertical line with hook',
      '„Ç≠': 'Two strokes: horizontal line, vertical line',
      '„ÇØ': 'Two strokes: horizontal line, curved line down-right',
      '„Ç±': 'Two strokes: horizontal line, vertical line with hook',
      '„Ç≥': 'Two strokes: horizontal line, vertical line',
      '„Çµ': 'Two strokes: horizontal line, vertical line with hook',
      '„Ç∑': 'Two strokes: horizontal line, curved line down-right',
      '„Çπ': 'Two strokes: horizontal line, curved line down-right',
      '„Çª': 'Two strokes: horizontal line, vertical line with hook',
      '„ÇΩ': 'Two strokes: horizontal line, diagonal down-right',
      '„Çø': 'Two strokes: horizontal line, vertical line with hook',
      '„ÉÅ': 'Two strokes: horizontal line, curved line down-right',
      '„ÉÑ': 'Two strokes: horizontal line, diagonal down-right',
      '„ÉÜ': 'Two strokes: horizontal line, vertical line with hook',
      '„Éà': 'Two strokes: horizontal line, vertical line with hook',
      '„Éä': 'Two strokes: horizontal line, vertical line with hook',
      '„Éã': 'Two strokes: horizontal line, horizontal line below',
      '„Éå': 'Two strokes: horizontal line, curved line down-right',
      '„Éç': 'Two strokes: horizontal line, vertical line with hook',
      '„Éé': 'One stroke: diagonal down-right',
      '„Éè': 'Two strokes: diagonal down-right, diagonal down-left',
      '„Éí': 'Two strokes: horizontal line, vertical line',
      '„Éï': 'Two strokes: horizontal line, curved line down-right',
      '„Éò': 'One stroke: curved line down-right',
      '„Éõ': 'Two strokes: horizontal line, vertical line with hook',
      '„Éû': 'Two strokes: horizontal line, curved line down-right',
      '„Éü': 'Two strokes: horizontal line, vertical line',
      '„É†': 'Two strokes: horizontal line, curved line down-right',
      '„É°': 'Two strokes: horizontal line, diagonal down-right',
      '„É¢': 'Two strokes: horizontal line, vertical line with hook',
      '„É§': 'Two strokes: horizontal line, vertical line with hook',
      '„É¶': 'Two strokes: horizontal line, curved line down-right',
      '„É®': 'Two strokes: horizontal line, vertical line',
      '„É©': 'Two strokes: horizontal line, vertical line with hook',
      '„É™': 'Two strokes: vertical line, vertical line',
      '„É´': 'Two strokes: horizontal line, curved line down-right',
      '„É¨': 'Two strokes: horizontal line, vertical line with hook',
      '„É≠': 'Two strokes: horizontal line, vertical line',
      '„ÉØ': 'Two strokes: horizontal line, curved line down-right',
      '„É≤': 'Two strokes: horizontal line, vertical line with hook',
      '„É≥': 'Two strokes: horizontal line, curved line down-right',
    };

    return details[character] ??
        'Standard $character character - analyze stroke count, shape, and proportions carefully';
  }

  /// Parse OpenAI response into RecognitionResult
  static RecognitionResult _parseResponse(String content, String targetCharacter) {
    try {
      debugPrint('üîç Parsing response for character: $targetCharacter');

      // Extract JSON from the response (it might have extra text)
      final jsonStart = content.indexOf('{');
      final jsonEnd = content.lastIndexOf('}') + 1;

      if (jsonStart == -1 || jsonEnd == 0) {
        debugPrint('‚ùå No JSON found in response');
        throw Exception('No JSON found in response');
      }

      final jsonString = content.substring(jsonStart, jsonEnd);
      debugPrint('üìù Extracted JSON: $jsonString');

      final data = jsonDecode(jsonString);

      final isCorrect = data['isCorrect'] as bool? ?? false;
      final confidence = (data['confidence'] as num?)?.toDouble() ?? 0.0;
      final accuracyScore = (data['accuracyScore'] as num?)?.toDouble() ?? 0.0;

      // Enhanced scoring breakdown
      final shapeScore = (data['shapeScore'] as num?)?.toDouble() ?? 0.0;
      final strokeScore = (data['strokeScore'] as num?)?.toDouble() ?? 0.0;
      final proportionScore = (data['proportionScore'] as num?)?.toDouble() ?? 0.0;
      final qualityScore = (data['qualityScore'] as num?)?.toDouble() ?? 0.0;

      final feedback = data['feedback'] as String? ?? 'No feedback provided';
      final issues = List<String>.from(data['issues'] ?? []);
      final strengths = List<String>.from(data['strengths'] ?? []);
      final suggestions = List<String>.from(data['suggestions'] ?? []);

      debugPrint('‚úÖ Parsed successfully - isCorrect: $isCorrect, confidence: $confidence');

      // Enhanced feedback with detailed scoring
      String enhancedFeedback = feedback;

      // Add scoring breakdown
      enhancedFeedback += '\n\nüìä Detailed Scores:';
      enhancedFeedback += '\n‚Ä¢ Shape Recognition: ${shapeScore.toInt()}%';
      enhancedFeedback += '\n‚Ä¢ Stroke Count & Order: ${strokeScore.toInt()}%';
      enhancedFeedback += '\n‚Ä¢ Proportional Accuracy: ${proportionScore.toInt()}%';
      enhancedFeedback += '\n‚Ä¢ Stroke Quality: ${qualityScore.toInt()}%';

      if (strengths.isNotEmpty) {
        enhancedFeedback += '\n\n‚úÖ Strengths: ${strengths.join(', ')}';
      }
      if (issues.isNotEmpty) {
        enhancedFeedback += '\n\n‚ùå Issues: ${issues.join(', ')}';
      }
      if (suggestions.isNotEmpty) {
        enhancedFeedback += '\n\nüí° Suggestions: ${suggestions.join(', ')}';
      }

      return RecognitionResult(
        recognizedCharacter: targetCharacter,
        confidence: confidence.clamp(0.0, 1.0),
        alternativeMatches: [],
        isCorrect: isCorrect,
        englishTranslation: _getEnglishTranslation(targetCharacter),
        feedback: enhancedFeedback,
        accuracyScore: accuracyScore.clamp(0.0, 100.0),
        shapeScore: shapeScore.clamp(0.0, 100.0),
        strokeScore: strokeScore.clamp(0.0, 100.0),
        proportionScore: proportionScore.clamp(0.0, 100.0),
        qualityScore: qualityScore.clamp(0.0, 100.0),
      );
    } catch (e) {
      debugPrint('‚ùå Error parsing OpenAI response: $e');
      debugPrint('Raw response: $content');

      // Fallback: try to extract basic info from the response
      final isCorrect =
          content.toLowerCase().contains('correct') && !content.toLowerCase().contains('incorrect');
      final confidence = isCorrect ? 0.8 : 0.3;

      return RecognitionResult(
        recognizedCharacter: targetCharacter,
        confidence: confidence,
        alternativeMatches: [],
        isCorrect: isCorrect,
        englishTranslation: _getEnglishTranslation(targetCharacter),
        feedback:
            'AI Analysis: ${content.length > 200 ? content.substring(0, 200) + '...' : content}',
        accuracyScore: confidence * 100,
        shapeScore: confidence * 100,
        strokeScore: confidence * 100,
        proportionScore: confidence * 100,
        qualityScore: confidence * 100,
      );
    }
  }

  /// Create error result
  static RecognitionResult _createErrorResult(String targetCharacter, String error) {
    return RecognitionResult(
      recognizedCharacter: targetCharacter,
      confidence: 0.0,
      alternativeMatches: [],
      isCorrect: false,
      englishTranslation: _getEnglishTranslation(targetCharacter),
      feedback: '‚ùå Recognition Error: $error',
      accuracyScore: 0.0,
      shapeScore: 0.0,
      strokeScore: 0.0,
      proportionScore: 0.0,
      qualityScore: 0.0,
    );
  }

  /// Get English translation for character
  static String _getEnglishTranslation(String character) {
    const translations = {
      // Hiragana
      '„ÅÇ': 'a', '„ÅÑ': 'i', '„ÅÜ': 'u', '„Åà': 'e', '„Åä': 'o',
      '„Åã': 'ka', '„Åç': 'ki', '„Åè': 'ku', '„Åë': 'ke', '„Åì': 'ko',
      '„Åï': 'sa', '„Åó': 'shi', '„Åô': 'su', '„Åõ': 'se', '„Åù': 'so',
      '„Åü': 'ta', '„Å°': 'chi', '„Å§': 'tsu', '„Å¶': 'te', '„Å®': 'to',
      '„Å™': 'na', '„Å´': 'ni', '„Å¨': 'nu', '„Å≠': 'ne', '„ÅÆ': 'no',
      '„ÅØ': 'ha', '„Å≤': 'hi', '„Åµ': 'fu', '„Å∏': 'he', '„Åª': 'ho',
      '„Åæ': 'ma', '„Åø': 'mi', '„ÇÄ': 'mu', '„ÇÅ': 'me', '„ÇÇ': 'mo',
      '„ÇÑ': 'ya', '„ÇÜ': 'yu', '„Çà': 'yo',
      '„Çâ': 'ra', '„Çä': 'ri', '„Çã': 'ru', '„Çå': 're', '„Çç': 'ro',
      '„Çè': 'wa', '„Çí': 'wo', '„Çì': 'n',
      // Katakana
      '„Ç¢': 'a', '„Ç§': 'i', '„Ç¶': 'u', '„Ç®': 'e', '„Ç™': 'o',
      '„Ç´': 'ka', '„Ç≠': 'ki', '„ÇØ': 'ku', '„Ç±': 'ke', '„Ç≥': 'ko',
      '„Çµ': 'sa', '„Ç∑': 'shi', '„Çπ': 'su', '„Çª': 'se', '„ÇΩ': 'so',
      '„Çø': 'ta', '„ÉÅ': 'chi', '„ÉÑ': 'tsu', '„ÉÜ': 'te', '„Éà': 'to',
      '„Éä': 'na', '„Éã': 'ni', '„Éå': 'nu', '„Éç': 'ne', '„Éé': 'no',
      '„Éè': 'ha', '„Éí': 'hi', '„Éï': 'fu', '„Éò': 'he', '„Éõ': 'ho',
      '„Éû': 'ma', '„Éü': 'mi', '„É†': 'mu', '„É°': 'me', '„É¢': 'mo',
      '„É§': 'ya', '„É¶': 'yu', '„É®': 'yo',
      '„É©': 'ra', '„É™': 'ri', '„É´': 'ru', '„É¨': 're', '„É≠': 'ro',
      '„ÉØ': 'wa', '„É≤': 'wo', '„É≥': 'n',
    };

    return translations[character] ?? character;
  }
}

/// Recognition result class
class RecognitionResult {
  final String recognizedCharacter;
  final double? confidence;
  final List<String> alternativeMatches;
  final bool isCorrect;
  final String englishTranslation;
  final String feedback;
  final double? accuracyScore;

  // Detailed scoring breakdown
  final double? shapeScore;
  final double? strokeScore;
  final double? proportionScore;
  final double? qualityScore;

  RecognitionResult({
    required this.recognizedCharacter,
    this.confidence,
    this.alternativeMatches = const [],
    required this.isCorrect,
    required this.englishTranslation,
    required this.feedback,
    this.accuracyScore,
    this.shapeScore,
    this.strokeScore,
    this.proportionScore,
    this.qualityScore,
  });
}
