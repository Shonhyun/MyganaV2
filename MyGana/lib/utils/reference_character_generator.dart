import 'dart:convert';
import 'dart:ui' as ui;

import 'package:flutter/material.dart';

class ReferenceCharacterGenerator {
  /// Generate a reference image for a character using text rendering
  static Future<String?> generateReferenceImage({
    required String character,
    required String svgPath, // We'll ignore this and use text rendering
    Size imageSize = const Size(512, 512),
  }) async {
    try {
      debugPrint('üéØ Generating text reference image for $character');

      // Create a picture recorder
      final recorder = ui.PictureRecorder();
      final canvas = Canvas(recorder);

      // Fill white background
      final backgroundPaint = Paint()
        ..color = Colors.white
        ..style = PaintingStyle.fill;
      canvas.drawRect(Rect.fromLTWH(0, 0, imageSize.width, imageSize.height), backgroundPaint);

      // Create high-quality text-based reference
      final textPainter = TextPainter(
        text: TextSpan(
          text: character,
          style: TextStyle(
            fontSize: 400, // Large, clear font size
            color: Colors.black,
            fontFamily: 'Noto Sans JP', // Japanese font
            fontWeight: FontWeight.bold,
          ),
        ),
        textDirection: TextDirection.ltr,
      );

      textPainter.layout();

      // Center the text
      final offset = Offset(
        (imageSize.width - textPainter.width) / 2,
        (imageSize.height - textPainter.height) / 2,
      );

      textPainter.paint(canvas, offset);

      // Convert to image
      final picture = recorder.endRecording();
      final image = await picture.toImage(
        imageSize.width.toInt(),
        imageSize.height.toInt(),
      );

      // Convert to byte data
      final byteData = await image.toByteData(format: ui.ImageByteFormat.png);
      if (byteData == null) {
        throw Exception('Failed to convert reference image to byte data');
      }

      // Convert to base64
      final base64String = base64Encode(byteData.buffer.asUint8List());

      // Clean up
      picture.dispose();
      image.dispose();

      debugPrint('‚úÖ Text reference generated for $character: ${base64String.length} characters');
      return base64String;
    } catch (e) {
      debugPrint('‚ùå Error generating reference image for $character: $e');
      return null;
    }
  }

  /// Get SVG path for a character
  static String getSvgPath(String character, String type) {
    // Map characters to their SVG filenames (matching actual file names)
    final svgMap = {
      // Hiragana - Basic vowels
      '„ÅÇ': '1_a_hira.svg',
      '„ÅÑ': '1_i_hira.svg',
      '„ÅÜ': '1_u_hira.svg',
      '„Åà': '1_e_hira.svg',
      '„Åä': '1_o_hira.svg',

      // Hiragana - K series
      '„Åã': '2_ka_hira.svg',
      '„Åç': '2_ki_hira.svg',
      '„Åè': '2_ku_hira.svg',
      '„Åë': '2_ke_hira.svg',
      '„Åì': '2_ko_hira.svg',

      // Hiragana - S series
      '„Åï': '3_sa_hira.svg',
      '„Åó': '3_shi_hira.svg',
      '„Åô': '3_su_hira.svg',
      '„Åõ': '3_se_hira.svg',
      '„Åù': '3_so_hira.svg',

      // Hiragana - T series
      '„Åü': '4_ta_hira.svg',
      '„Å°': '4_chi_hira.svg',
      '„Å§': '4_tsu_hira.svg',
      '„Å¶': '4_te_hira.svg',
      '„Å®': '4_to_hira.svg',

      // Hiragana - N series
      '„Å™': '5_na_hira.svg',
      '„Å´': '5_ni_hira.svg',
      '„Å¨': '5_nu_hira.svg',
      '„Å≠': '5_ne_hira.svg',
      '„ÅÆ': '5_no_hira.svg',
      '„Çì': '5_n_hira.svg',

      // Hiragana - H series
      '„ÅØ': '6_ha_hira.svg',
      '„Å≤': '6_hi_hira.svg',
      '„Åµ': '6_fu_hira.svg',
      '„Å∏': '6_he_hira.svg',
      '„Åª': '6_ho_hira.svg',

      // Hiragana - M series
      '„Åæ': '7_ma_hira.svg',
      '„Åø': '7_mi_hira.svg',
      '„ÇÄ': '7_mu_hira.svg',
      '„ÇÅ': '7_me_hira.svg',
      '„ÇÇ': '7_mo_hira.svg',

      // Hiragana - Y series
      '„ÇÑ': '8_ya_hira.svg',
      '„ÇÜ': '8_yu_hira.svg',
      '„Çà': '8_yo_hira.svg',

      // Hiragana - R series
      '„Çâ': '9_ra_hira.svg',
      '„Çä': '9_ri_hira.svg',
      '„Çã': '9_ru_hira.svg',
      '„Çå': '9_re_hira.svg',
      '„Çç': '9_ro_hira.svg',

      // Hiragana - W series
      '„Çè': '10_wa_hira.svg',
      '„Çí': '10_wo_hira.svg',

      // Katakana - Basic vowels
      '„Ç¢': '1_a_kata.svg',
      '„Ç§': '1_i_kata.svg',
      '„Ç¶': '1_u_kata.svg',
      '„Ç®': '1_e_kata.svg',
      '„Ç™': '1_o_kata.svg',

      // Katakana - K series
      '„Ç´': '2_ka_kata.svg',
      '„Ç≠': '2_ki_kata.svg',
      '„ÇØ': '2_ku_kata.svg',
      '„Ç±': '2_ke_kata.svg',
      '„Ç≥': '2_ko_kata.svg',

      // Katakana - S series
      '„Çµ': '3_sa_kata.svg',
      '„Ç∑': '3_shi_kata.svg',
      '„Çπ': '3_su_kata.svg',
      '„Çª': '3_se_kata.svg',
      '„ÇΩ': '3_so_kata.svg',

      // Katakana - T series
      '„Çø': '4_ta_kata.svg',
      '„ÉÅ': '4_chi_kata.svg',
      '„ÉÑ': '4_tsu_kata.svg',
      '„ÉÜ': '4_te_kata.svg',
      '„Éà': '4_to_kata.svg',

      // Katakana - N series
      '„Éä': '5_na_kata.svg',
      '„Éã': '5_ni_kata.svg',
      '„Éå': '5_nu_kata.svg',
      '„Éç': '5_ne_kata.svg',
      '„Éé': '5_no_kata.svg',
      '„É≥': '5_p_kata.svg', // Note: This might be 'n' in your files

      // Katakana - H series
      '„Éè': '6_ha_kata.svg',
      '„Éí': '6_hi_kata.svg',
      '„Éï': '6_fu_kata.svg',
      '„Éò': '6_he_kata.svg',
      '„Éõ': '6_ho_kata.svg',

      // Katakana - M series
      '„Éû': '7_ma_kata.svg',
      '„Éü': '7_mi_kata.svg',
      '„É†': '7_mu_kata.svg',
      '„É°': '7_me_kata.svg',
      '„É¢': '7_mo_kata.svg',

      // Katakana - Y series
      '„É§': '8_ya_kata.svg',
      '„É¶': '8_yu_kata.svg',
      '„É®': '8_yo_kata.svg',

      // Katakana - R series
      '„É©': '9_ra_kata.svg',
      '„É™': '9_ri_kata.svg',
      '„É´': '9_ru_kata.svg',
      '„É¨': '9_re_kata.svg',
      '„É≠': '9_ro_kata.svg',

      // Katakana - W series
      '„ÉØ': '10_wa_kata.svg',
      '„É≤': '10_wo_kata.svg',
    };

    final filename = svgMap[character];
    if (filename == null) {
      throw Exception('No SVG found for character: $character');
    }

    return 'assets/HiraganaSVG/$filename';
  }
}
